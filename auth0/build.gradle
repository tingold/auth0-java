apply plugin: 'java'

compileJava {
    sourceCompatibility "1.8"
}

dependencies {
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.3'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.squareup.okhttp:mockwebserver:2.5.0'
    testCompile 'com.jayway.awaitility:awaitility:1.6.4'
}

def semver = defineVersion()
version = semver.stringVersion

logger.lifecycle("Using version ${version} for ${name}")


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

apply from: '../maven.gradle'
apply from: '../bintray.gradle'

def defineVersion() {
    def current = describeGit(false)
    def snapshot = current == null
    if (snapshot) {
        current = describeGit(snapshot, "0.0.1")
    }
    return new Semver(snapshot: snapshot, version: current)
}

def describeGit(boolean snapshot, String defaultValue = null) {
    def arguments = ['describe', '--tags']
    arguments.add(snapshot ? '--abbrev=0' : '--exact-match')
    def stdout = new ByteArrayOutputStream()
    def string = defaultValue
    try {
        def result = project.exec {
            executable = 'git'
            args = arguments
            standardOutput = stdout
        }

        result.assertNormalExitValue()

        if (stdout.toByteArray().length > 0) {
            string = stdout.toString().replace("\n", "")
        }
    } catch(Exception e) {
        logger.debug("Failed git describe command", e)
    } finally {
        stdout.close()
    }
    return string
}

class Semver {
    def version
    def snapshot

    def getStringVersion() {
        return snapshot ? version + "-SNAPSHOT" : version
    }
}